from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from database import Database


TOKEN = "5841939580:AAH2nh8VePTxpvnuseUhOlrmRVWW5PyZeHk"
FILENAME = "database"
FILENAME_LIKES = "liked"
CITIES = ["–ú–æ—Å–∫–≤–∞", "–ù–æ–≤–≥–æ—Ä–æ–¥", "–°–∞–º–∞—Ä–∞", "–°—ã–∑—Ä–∞–Ω—å", "–°–∞—Ä–∞—Ç–æ–≤", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", ]


# FUNCTION
def correct_name(name):
    if len(name) <= 10 and name[0].isupper():
        return True
    return False



# BUTTONS
FORM_BTN = KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
EDIT_FORM_BTN = KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
SWIPE_FORM_BTN = KeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
LIKES_BTN = KeyboardButton("–õ–∞–π–∫–∏")
STOP_BTN = KeyboardButton("–°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É")
LIKE_BTN = KeyboardButton("üòç")
SKIP_BTN = KeyboardButton("‚û°")
BACK_BTN = KeyboardButton("üîô")
EDIT_NAME = KeyboardButton("–ò–º—è")
EDIT_CITY = KeyboardButton("–ì–æ—Ä–æ–¥")
EDIT_AGE = KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç")
EDIT_DESC = KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ")
ACTIVE_PROFILE_BTN = KeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")

# KEYBOARDS
FORM_KB = ReplyKeyboardMarkup(resize_keyboard=True)
FORM_KB.add(FORM_BTN)
MENU_KB = ReplyKeyboardMarkup(resize_keyboard=True)
MENU_KB.add(EDIT_FORM_BTN, SWIPE_FORM_BTN, LIKES_BTN, STOP_BTN)
CHECK_USERS = ReplyKeyboardMarkup(resize_keyboard=True)
CHECK_USERS.add(LIKE_BTN, SKIP_BTN)
EDIT_PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_PROFILE_KB.add(EDIT_NAME, EDIT_CITY, EDIT_AGE, EDIT_DESC)
ACTIVE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
ACTIVE_KB.add(ACTIVE_PROFILE_BTN)

users = {}
last_user_id = 0

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_(message: types.Message):
    users = Database.get_dict(FILENAME)
    user_id = str(message.from_user.id)
    username = message.from_user.username
    users[user_id] = {"state": "start", "active": "False",
                      "username": username, "name": "no", "city": "no", "age": "no", "likes": []}
    Database.write(users, FILENAME)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.username}!\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã "
                        f"–º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", reply_markup=FORM_KB)

@dp.message_handler(commands=['menu'])
async def menu_(message: types.Message):
    users = Database.get_dict(FILENAME)
    user_id = str(message.from_user.id)
    users[user_id]["state"] = "wait"
    Database.write(users, FILENAME)
    await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)


@dp.message_handler()
async def info(message: types.Message):
    user_id = str(message.from_user.id)
    global last_user_id
    users = Database.get_dict(FILENAME)
    if message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É" and users[user_id]["state"] == "start":
        users[user_id]["state"] = "name"
        Database.write(users, FILENAME)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    elif users[user_id]["state"] == "name":
        if correct_name(message.text):
            users[user_id]["state"] = "city"
            users[user_id]["name"] = message.text
            Database.write(users, FILENAME)
            await message.reply("–í–∞—à–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        else:
            await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
    elif users[user_id]["state"] == "city":
        if message.text in CITIES:
            users[user_id]["state"] = "age"
            users[user_id]["city"] = message.text
            Database.write(users, FILENAME)
            await message.reply("–í–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        else:
            await message.reply(f"–ì–æ—Ä–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n{', '.join(CITIES)}")
    elif users[user_id]["state"] == "age":
        if message.text.isdigit() and 18 <= int(message.text) <= 80:
            users[user_id]["state"] = "description"
            users[user_id]["age"] = message.text
            users[user_id]["active"] = "True"
            Database.write(users, FILENAME)
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ")
    elif users[user_id]["state"] == "description":
        users[user_id]["state"] = "wait"
        Database.save_desc_to_file(user_id, message.text)
        Database.write(users, FILENAME)
        await message.reply("–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!", reply_markup=MENU_KB)
    elif users[user_id]["state"] == "wait" and message.text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã":
        users[user_id]["state"] = "check_profiles"
        Database.write(users, FILENAME)
        user_info = Database.random_profile_list(FILENAME, user_id)
        last_user_id = user_info[0]
        await message.reply(f"{user_info[1]}\n{user_info[2]}\n{user_info[3]}\n{user_info[4]}", reply_markup=CHECK_USERS)
    elif users[user_id]["state"] == "check_profiles" and message.text == "‚û°":
        Database.write(users, FILENAME)
        user_info = Database.random_profile_list(FILENAME, user_id)
        last_user_id = user_info[0]
        await message.reply(f"{user_info[1]}\n{user_info[2]}\n{user_info[3]}", reply_markup=CHECK_USERS)
    # Edit Profile
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É" and users[user_id]["state"] == "wait":
        users[user_id]["state"] = "edit"
        Database.write(users, FILENAME)
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:  ", reply_markup=EDIT_PROFILE_KB)
    elif message.text == "–ò–º—è" and users[user_id]["state"] == "edit":
        users[user_id]["state"] = "edit_name"
        Database.write(users, FILENAME)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ")
    elif users[user_id]["state"] == "edit_name":
        if correct_name(message.text):
            users[user_id]["state"] = "wait"
            users[user_id]["name"] = message.text
            Database.write(users, FILENAME)
            profile_list = Database.get_my_profile(FILENAME, user_id)
            await message.reply("–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!\n–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞")
            await message.reply(
                f"\n{profile_list[0]}\n{profile_list[1]}\n{profile_list[2]}\n{Database.get_desc_user(user_id)}",
                reply_markup=MENU_KB)
        else:
            await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
    elif message.text == "–ì–æ—Ä–æ–¥" and users[user_id]["state"] == "edit":
        users[user_id]["state"] = "edit_city"
        Database.write(users, FILENAME)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: ")
    elif users[user_id]["state"] == "edit_city":
        users[user_id]["state"] = "wait"
        users[user_id]["city"] = message.text
        Database.write(users, FILENAME)
        profile_list = Database.get_my_profile(FILENAME, user_id)
        await message.reply("–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!")
        await message.reply(f"\n{profile_list[0]}\n{profile_list[1]}\n{profile_list[2]}\n{Database.get_desc_user(user_id)}", reply_markup=MENU_KB)
    elif message.text == "–í–æ–∑—Ä–∞—Å—Ç" and users[user_id]["state"] == "edit":
        users[user_id]["state"] = "edit_age"
        Database.write(users, FILENAME)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    elif users[user_id]["state"] == "edit_age":
        if message.text.isdigit() and 18 <= int(message.text) <= 80:
            users[user_id]["state"] = "wait"
            users[user_id]["age"] = message.text
            Database.write(users, FILENAME)
            profile_list = Database.get_my_profile(FILENAME, user_id)
            await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!")
            await message.reply(
                f"\n{profile_list[0]}\n{profile_list[1]}\n{profile_list[2]}\n{Database.get_desc_user(user_id)}",
                reply_markup=MENU_KB)
    elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ" and users[user_id]["state"] == "edit":
        users[user_id]["state"] = "edit_desc"
        Database.write(users, FILENAME)
        await message.reply(f"–ü—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {Database.get_desc_user(user_id)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif users[user_id]["state"] == "edit_desc":
        users[user_id]["state"] = "wait"
        Database.save_desc_to_file(user_id, message.text)
        Database.write(users, FILENAME)
        profile_list = Database.get_my_profile(FILENAME, user_id)
        await message.reply(f"\n{profile_list[0]}\n{profile_list[1]}\n{profile_list[2]}\n{Database.get_desc_user(user_id)}", reply_markup=MENU_KB)

    # Check Profiles
    elif users[user_id]["state"] == "check_profiles" and message.text == "üòç":
        if last_user_id not in users[user_id]["likes"]:
            users[user_id]["likes"].append(last_user_id)
        Database.write(users, FILENAME)
        user_info = Database.random_profile_list(FILENAME, user_id)
        last_user_id = user_info[0]
        await message.reply(f"{user_info[1]}\n{user_info[2]}\n{user_info[3]}", reply_markup=CHECK_USERS)
    elif users[user_id]["state"] == "wait" and message.text == "–õ–∞–π–∫–∏":
        users = Database.get_dict(FILENAME)
        for liked_id in users[user_id]["likes"]:
            for id in users.keys():
                if liked_id == id:
                    if user_id in users[id]["likes"] and users[id]["active"] == "True":
                        user_info = Database.get_profile_by_id(users, id)
                        await message.reply(f"@{user_info[0]}\n{user_info[1]}\n{user_info[2]}\n"
                                            f"{user_info[3]}")
    # freeze and active profile
    elif users[user_id]["state"] == "wait" and message.text == "–°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É":
        users[user_id]["active"] = "False"
        Database.write(users, FILENAME)
        await message.reply(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–∫—Ä—ã—Ç–∞. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏.\n"
                            f"–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –í–∞—Å –Ω–µ –≤–∏–¥—è—Ç.\n"
                            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∫ –Ω–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
                            reply_markup=ACTIVE_KB)
    elif users[user_id]["state"] == "wait" and message.text == "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å":
        users[user_id]["active"] = "True"
        Database.write(users, FILENAME)
        await message.reply(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ!", reply_markup=MENU_KB)







if __name__ == '__main__':
    executor.start_polling(dp)